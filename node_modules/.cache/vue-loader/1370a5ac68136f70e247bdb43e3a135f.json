{"remainingRequest":"/Users/AZUKI00/homepage/first/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/AZUKI00/homepage/first/src/App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/AZUKI00/homepage/first/src/App.vue","mtime":1597302055488},{"path":"/Users/AZUKI00/homepage/first/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/AZUKI00/homepage/first/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/AZUKI00/homepage/first/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/AZUKI00/homepage/first/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/AZUKI00/homepage/first/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiNhcHAgewogIGZvbnQtZmFtaWx5OiAnQXZlbmlyJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsKICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsKICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlOwogIHRleHQtYWxpZ246IGNlbnRlcjsKICBjb2xvcjogIzJjM2U1MDsKICBtYXJnaW4tdG9wOiA2MHB4Owp9Cg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["\nQiitaのアウトプットが履歴書に!?エンジニア転職ならQiita Jobs\n詳しくはこちら\n\n1691\n\n16\n567000\n@567000\n2020年07月13日に更新\nVue.js を vue-cli を使ってシンプルにはじめてみる\nJavaScript\nVue.js\nvue-cli\nvue-cli3\nVue.js を vue-cli でシンプルに過不足なくスタートする\nはじめに\n可能なかぎり、この通りやればできるようにシンプルで過不足なくコマンドをまとめていきます。\n\n(2019.02)\nVue CLI 3対応するためにほぼサンプルコードを一新しました。\nVue-cli 2.x版が必要なかたはこちらにバックアップしておいたのでご参照ください。\n\nvue-cli のインストール\nVue.jsを使う環境を準備するためのコマンドラインインタフェースをインストールします。\n\n$ npm install -g @vue/cli\nもし、2.xがインストールされている方であればいったんアンインストールしてからインストールしてください。\n\n$ npm uninstall -g vue-cli\n$ npm install -g @vue/cli\nプロジェクトを作成する\n$ vue create my-project\n※ ちなみにプロキシを使う場合には環境変数 ``https_proxy`` を設定してください\n質問形式で設定を聞かれますがとくにこだわりがなければ Enter で進めてください。\n\n$ cd my-project\n$ npm run serve\nブラウザで http://localhost:8080/ をアクセスするとサンプルが表示されます。\n\nimage.png\n\nプロジェクトを改造しながら理解する\n全体の流れを理解する\n出来上がったソースを見てみると非常に様々なものが作られているのがわかります。 実際に動いているソースを見るためにビルドを行います。 理解するためには、ちょっと手を入れて、ちょっと動きがかわって、を繰り返すのが一番です。\n\nまず出来上がったpublic/index.htmlを見てみます。\n\npublic/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\n    <title>my-project</title>\n  </head>\n  <body>\n    <noscript>\n      <strong>We're sorry but my-project doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>\n    </noscript>\n    <div id=\"app\"></div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\nあやしいのは<div id=\"app\"></div>ですが、これの正体はどこで定義されているのでしょうか？ よく見てみると <script> の読み込みもありません。 ということは、実際動いているHTMLはこれではありません。\n\nということで、実際に動いているソースを見るためにビルドを行います。\n\n$ npm run build\nすると ./dist というフォルダが作られその中に実際に動くソースが作られます。 さらに言えば ./dist/index.html が実際に最初に動くソースになります。 それでは./dist/index.htmlをみてみましょう。\n\n/dist/index.html\n<!DOCTYPE html>\n<html lang=en>\n\n<head>\n    <meta charset=utf-8>\n    <meta http-equiv=X-UA-Compatible content=\"IE=edge\">\n    <meta name=viewport content=\"width=device-width,initial-scale=1\">\n    <link rel=icon href=/favicon.ico> <title>my-project</title>\n    <link href=/css/app.e2713bb0.css rel=preload as=style>\n    <link href=/js/app.81951a0b.js rel=preload as=script>\n    <link href=/js/chunk-vendors.7ada56f9.js rel=preload as=script>\n    <link href=/css/app.e2713bb0.css rel=stylesheet>\n</head>\n\n<body><noscript><strong>We're sorry but my-project doesn't work properly without JavaScript enabled. Please enable it\n            to continue.</strong></noscript>\n    <div id=app></div>\n    <script src=/js/chunk-vendors.7ada56f9.js> </script> <script src=/js/app.81951a0b.js> </script> </body> </html>\n※読みやすいように整形してあります\nもとのソースと比較してcssやscriptが入っているのがわかります。\n\nということでこれが大枠の動きです。 index.html → buid → ./dist/index.html です。 それがわかったところでソースをいじっていきます。\n\nmain.js をいじる\n/src/main.js\nimport Vue from 'vue'\nimport App from './App.vue'\n\nVue.config.productionTip = false\n\nnew Vue({\n  render: h => h(App),\n}).$mount('#app')\n'#app'に対して何かしているようですがよくわかならいのでスルーします。 ./Appを import しているようなので、次は、./Appを見てみましょう。\n\nApp.vue をいじる\n./src/App.vue\n<template>\n  <div id=\"app\">\n    <img alt=\"Vue logo\" src=\"./assets/logo.png\">\n    <HelloWorld msg=\"Welcome to Your Vue.js App\"/>\n  </div>\n</template>\n\n<script>\nimport HelloWorld from './components/HelloWorld.vue'\n\nexport default {\n  name: 'app',\n  components: {\n    HelloWorld\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\nちょっと長いですが、3つのパートに分割して見てみましょう。\n\n<template>\n  <div id=\"app\">\n    <img alt=\"Vue logo\" src=\"./assets/logo.png\">\n    <HelloWorld msg=\"Welcome to Your Vue.js App\"/>\n  </div>\n</template>\nまず、ここまで。 普通のHTMLです。\n（一か所だけ <HelloWorld> というタグが気になりますが）\n次、\n\n<script>\nimport HelloWorld from './components/HelloWorld.vue'\n\nexport default {\n  name: 'app',\n  components: {\n    HelloWorld\n  }\n}\n</script>\nここは残して、後で考えることにして、次。\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\nここは単にスタイル。 この.vueファイルには、HTMLのテンプレートとスタイルを一緒にかいておけるということは覚えておきましょう。 いわゆるコンポーネント化ができているということですので。\n\n次に、後回しにした Hello を見てみます。\n\n./src/components/HelloWorld.vue\n<template>\n  <div class=\"hello\">\n    <h1>{{ msg }}</h1>\n    <p>\n      For a guide and recipes on how to configure / customize this project,<br>\n      check out the\n      <a href=\"https://cli.vuejs.org\" target=\"_blank\" rel=\"noopener\">vue-cli documentation</a>.\n    </p>\n    <h3>Installed CLI Plugins</h3>\n    <ul>\n      <li><a href=\"https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-babel\" target=\"_blank\" rel=\"noopener\">babel</a></li>\n      <li><a href=\"https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-eslint\" target=\"_blank\" rel=\"noopener\">eslint</a></li>\n    </ul>\n    <h3>Essential Links</h3>\n    <ul>\n      <li><a href=\"https://vuejs.org\" target=\"_blank\" rel=\"noopener\">Core Docs</a></li>\n      <li><a href=\"https://forum.vuejs.org\" target=\"_blank\" rel=\"noopener\">Forum</a></li>\n      <li><a href=\"https://chat.vuejs.org\" target=\"_blank\" rel=\"noopener\">Community Chat</a></li>\n      <li><a href=\"https://twitter.com/vuejs\" target=\"_blank\" rel=\"noopener\">Twitter</a></li>\n      <li><a href=\"https://news.vuejs.org\" target=\"_blank\" rel=\"noopener\">News</a></li>\n    </ul>\n    <h3>Ecosystem</h3>\n    <ul>\n      <li><a href=\"https://router.vuejs.org\" target=\"_blank\" rel=\"noopener\">vue-router</a></li>\n      <li><a href=\"https://vuex.vuejs.org\" target=\"_blank\" rel=\"noopener\">vuex</a></li>\n      <li><a href=\"https://github.com/vuejs/vue-devtools#vue-devtools\" target=\"_blank\" rel=\"noopener\">vue-devtools</a></li>\n      <li><a href=\"https://vue-loader.vuejs.org\" target=\"_blank\" rel=\"noopener\">vue-loader</a></li>\n      <li><a href=\"https://github.com/vuejs/awesome-vue\" target=\"_blank\" rel=\"noopener\">awesome-vue</a></li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\nだいたい今まで見たファイルと一緒ですが、{{ msg }}というのがあります。 後の方で export ... というのがあって、その中で json 的に msg: String と宣言しています。\n\nではこのmsgには何が入るのかというと。App.vueの中で以下のようになっていたのを思い出してみます。おそらく想像できる通りですがここで与えた\"Welcome to Your Vue.js App\"が入ります。\n\n./src/App.vue\n       :\n    <HelloWorld msg=\"Welcome to Your Vue.js App\"/>\n       :\nここまでで、サンプルの動きとしては、index.html ← src/App.vue ← src/components/HelloWorld.vue という入れ子構造になっていることがなんとなくわかったのですが、ややこしいので1階層だけにしてみましょう。 App.vueをシンプルにして、Hello も削除してしまいます。 ついでに、assets の中の画像も消してしまいます。\n\n結果、今は、以下の状態です。\n\n/public/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\n    <title>my-project</title>\n  </head>\n  <body>\n    <noscript>\n      <strong>We're sorry but my-project doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>\n    </noscript>\n    <div id=\"app\"></div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n/src/main.js\nimport Vue from 'vue'\nimport App from './App.vue'\n\nVue.config.productionTip = false\n\nnew Vue({\n  render: h => h(App),\n}).$mount('#app')\n./src/App.vue\n<template>\n  <div>\n    <p>\n      サンプル\n    </p>\n  </div>\n</template>\n他にもtestやなんやらありますが基本的にはこの3ファイルで構成されています。\n\nindex.html ... HTMLの親玉の部分。headのいろいろいじる以外は特に修正の必要なし\nsrc/main.js ... しばらく変更の必要なさそう\nsrc/App.vue ... 主に変更するファイル？\nです。 比較的シンプルにおさまりました。\n\nここらで一回 npm run serve を実行して http://localhost:8080 を見てみてください。 シンプルに サンプル とだけ出た画面が出ると思います。\n\n一休み\nということで、いったん、シンプルな構造に落とし込むことができました。 ただ、これでは、いったい Vue.js の何がよいのかわかりません。 次は、Vue.js をいかしたサンプルに改造することを考えたいと思います。\n\nVue.js らしくしてみる\nデータバインディングを体験してみる\nVue.jsらしくデータバインディングをしてみます。つまり簡単に言うと、データと表示を連携（バインド）させてみます。\nApp.vueを下のように書き換えて動作確認してみます。\n\n./src/App.vue\n<template>\n  <div>\n    <p>\n      {{msg}}\n    </p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      msg: 'Hello World!'\n    }\n  }\n}\n</script>\nnpm run serveしておけば変更を検知してかってにブラウザの更新まで行われます。 画面では、単に Pタグで、Hello World! と出てると思います。 どうしてかというと{{msg}}のところに、export default{ data() }で渡している msg の値がはいるからです。\n\nもちろんソースコード上で Hello World! を書き換えれば同じように画面も変わるのですが、フォーム<input>を使ってリアルタイムに書き換えてみましょう。 App.vueを書き換えてみます。 だんだんアプリケーションっぽくなってきます。\n\nsrc/App.vue\n<template>\n  <div>\n    <p>\n      {{msg}}\n    </p>\n    <input type=\"text\" v-model=\"msg\">\n  </div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      msg: 'Hello World!'\n    }\n  }\n}\n</script>\n画面ではテキストボックスが追加されました。 ここでテキストボックスをいじると、表示も変わります。 特にコールバックなども指定していないのにこういうことができるのが、いわゆる、データバインディングのすごさです。 なんとなくわかると思いますがすべてが msg という名前によってバインディングされます。\n\nデータを判定する\n入力されたまま表示するだけだと面白くないので、少し条件を加えてみます。 入力されたテキストが空になった時には固定でno textと出すようにしてみます。\n\nsrc/App.vue\n<template>\n  <div>\n    <p v-if=\"msg.length > 0\">\n      {{msg}}\n    </p>\n    <p v-else>\n      no text\n    </p>\n    <input type=\"text\" v-model=\"msg\">\n  </div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      msg: 'Hello World!'\n    }\n  }\n}\n</script>\nおわかりでしょうか。 pタグのところにv-ifが加わり文字長のチェックをしています。文字長があれば普通に表示、そうじゃなければ（つまり文字長ゼロ）v-elseの処理に入って no text の Pタグがでます。\n\nイベントで処理する\nもう少しアプリケーションっぽくしたいので、ボタンでのイベントを作ってみます。 ボタンをおすとテキストがクリアされるようなメソッドを作ります。\n\nsrc/App.vue\n<template>\n  <div>\n    <p v-if=\"msg.length > 0\">\n      {{msg}}\n    </p>\n    <p v-else>\n      no text\n    </p>\n    <input type=\"text\" v-model=\"msg\">\n    <button @click=\"clear()\">clear</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      msg: 'Hello World!'\n    }\n  },\n  methods: {\n    clear () {\n      this.msg = ''\n    }\n  }\n}\n</script>\nボタン<button>を追加してクリックでclear()がよびだされるようにします。@click=\"clear()\" です。 呼び出される関数の実体は、methods内に定義してあります。非常にシンプルにmsg=''で空にしているだけです。\n\nブラウザ上で見るとボタンが出ているはずです。 ボタンを押すと、テキストボックスが空になって、表示が no text になります。\n\n動きとしては、@click で clear() が呼び出されて　msg='' で msg が空になって データバインディングの結果表示が更新されて v-if で文字長がゼロなので no text になります。\n\n一休み\nこれで Vue.js を使って、データバインディングと簡単なイベント処理をすることができて Vue.js っぽくなってきました。次はもう少しコンポーネント的な使い方を考えてみます。\n\n少し便利にコンポーネント化を体験する\n通常どんなページで共通化されるであろうヘッダ部分をコンポーネントにしてみます。\n\nヘッダの呼び出し部分を作る\nさっそく追加。 まずはtemplateに<myheader>というタグを作ってみます。名前は適当です。そして<script>の最初のところにimport myheader from './components/myheader'を追加します。 export default の箇所にも components: { myheader } を追加しています。\n\nsrc/App.vue\n<template>\n  <div>\n    <myheader></myheader>\n    <p v-if=\"msg.length > 0\">\n      {{msg}}\n    </p>\n    <p v-else>\n      no text\n    </p>\n    <input type=\"text\" v-model=\"msg\">\n    <button @click=\"clear()\">clear</button>\n  </div>\n</template>\n\n<script>\nimport myheader from './components/myheader'\n\nexport default {\n  components: {\n    myheader\n  },\n  data () {\n    return {\n      msg: 'Hello World!'\n    }\n  },\n  methods: {\n    clear () {\n      this.msg = ''\n    }\n  }\n}\n</script>\n追加したものにあわせて src/components 配下に myheader.vue を作ってみます。\n\nsrc/components/myheader.vue\n<template>\n  <div>\n    ここはヘッダーです。\n  </div>\n</template>\n本当はここにヘッダのHTMLをいろいろ書くのですがとりあえずこれだけ。 これでブラウザを見てみると、無事に、上部に ここはヘッダーです と出ます。 試しに、<myheader>タグを何行か連続して書いてみてると……想像通りの結果になると思います。（こういうのは結果がわかっていても試してみるのが大事です！）\n\nもちろんこのmyheader.vueにもscriptやstyleも書けます。 なので、ヘッダで扱うアニメーションやメニューの処理であったりなどはここにコンポーネント化することができるのです。 少し前だとSSI（server side include）などでやるのが当たり前でしたが、クライアント側だけでこういうことが簡単にできるのは非常に便利です。\n\n一休み\nこれでコンポーネント化ができました。次は、最近出てきたvue-routerあたりを使ってページングあたりを目指してみるのが良いのかもしれませんが、比較的SPA（シングルページアプリケーション）は扱いがいろいろ難しいのでやめました。\n※ とか言いながらVue-routerについても投稿しました。こちら参照\n\nAJAX的なものと組み合わせてデータ更新をしてみたいと思います。\n\nFetchを使ったAjax処理\n外部のWebAPIを使ってデータを取得して画面上のデータ更新をしてみます。\n今回は標準で手軽に使えるfetchを使います。\n\njQueryを使った例はこちらにあります。\nVue-cli2.0版のときの記事の後半でjQueryを使っていますのでそちらご参照ください。\n\n今回は起動時に外部のWebサービスから適当に値を取得して画面を書き換える処理を行います。もしボタンクリック時に行いたければ前みたいに@clickに書いてあげればいいだけです。\n\nsrc/App.vue\n<template>\n  <div>\n    <myheader></myheader>\n    <p v-if=\"msg.length > 0\">\n      {{msg}}\n    </p>\n    <p v-else>\n      no text\n    </p>\n    <input type=\"text\" v-model=\"msg\">\n    <button @click=\"clear()\">clear</button>\n  </div>\n</template>\n\n<script>\nimport myheader from './components/myheader'\n\nexport default {\n  components: {\n    myheader\n  },\n  data () {\n    return {\n      msg: 'Hello World!'\n    }\n  },\n  methods: {\n    clear () {\n      this.msg = ''\n    }\n  },\n  created () {\n    fetch('http://www.geonames.org/postalCodeLookupJSON?postalcode=10504&country=US')\n    .then( response => {\n      return response.json()\n    })\n    .then( json => {\n      this.msg = json.postalcodes[0].adminName1\n    })\n    .catch( (err) => {\n      this.msg = err // エラー処理\n    });\n  }\n}\n</script>\nだんだん長くなってきた App.vue ですが、今回は、created()を追加しています。\n\n中身は比較的簡単に（なぜかアメリカの）郵便番号検索で住所を取得しています。FetchでJSONデータを取得してきて値を msg に入れています。\n\n実行すると msg のところが変わってると思います。\n\nおしまい\nこれで一通りやりたいことはできました。\n\n編集リクエスト\n\nストック\n\n1691\n567000\n@567000\n組み込みからWebサービスから機械学習からオブジェクト指向から開発プロセスから認定ScrumMasterからなんならUI/UX/HCD/デザイン思考まで。 投稿した内容でなにかあったらTwitterなどへ気軽にどうぞです。\nhttps://twitter.com/aka567000\nフォロー\n\n\n\n\nVue.js を vue-cli でシンプルに過不足なくスタートする\nはじめに\nvue-cli のインストール\nプロジェクトを作成する\nプロジェクトを改造しながら理解する\n全体の流れを理解する\nmain.js をいじる\nApp.vue をいじる\n一休み\nVue.js らしくしてみる\nデータバインディングを体験してみる\nデータを判定する\nイベントで処理する\n一休み\n少し便利にコンポーネント化を体験する\nヘッダの呼び出し部分を作る\n一休み\nFetchを使ったAjax処理\nおしまい\nコメント\nこの記事にコメントはありません。\n投稿する\n編集\nプレビュー\nテキストを入力\n0B / 100MB\nHow developers code is here.\nQiita\nAbout\n利用規約\nプライバシー\nガイドライン\nリリース\nAPI\nご意見\nヘルプ\n広告掲載\nIncrements\nAbout\n採用情報\nブログ\nQiita Team\nQiita Jobs\nQiita Zine\n© 2011-2020 Increments Inc.\nユーザーは見つかりませんでした"]}]}